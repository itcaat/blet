
üìÇ ./cmd/week_matrix.go
package cmd

import (
	"fmt"

	"github.com/itcaat/blet/config"
	"github.com/itcaat/blet/internal/api"
	"github.com/itcaat/blet/internal/cache"
	"github.com/itcaat/blet/internal/form"
	"github.com/itcaat/blet/internal/usecase"
)

func RunWeekMatrix(client *api.Client, cfg *config.Config) {

	var departDate, backDate string
	err := form.AskDates(&departDate, &backDate)

	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
		return
	}
	fmt.Println("‚úàÔ∏è –î–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é:")
	fmt.Printf("–í—ã–ª–µ—Ç-–ø—Ä–∏–ª–µ—Ç: %s - %s
", departDate, backDate)

	flights, err := usecase.GetWeekMatrix(client, cfg.DefaultOrigin, cfg.DefaultDestination, departDate, backDate)

	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
		return
	}

	for _, flight := range flights {
		fmt.Printf("- %s ‚Üí %s ‚Üí %s –∑–∞ %d‚ÇΩ (%s ‚Üí %s, –ø–µ—Ä–µ—Å–∞–¥–æ–∫: %d)
",
			cache.GetCityName(cfg.DefaultOrigin), cache.GetAnyName(flight.Destination), cache.GetCityName(cfg.DefaultOrigin), flight.Value,
			flight.DepartDate, flight.ReturnDate, flight.NumberOfStops)
	}
}


üìÇ ./cmd/special_offers.go
package cmd

import (
	"fmt"

	"github.com/itcaat/blet/config"
	"github.com/itcaat/blet/internal/api"
	"github.com/itcaat/blet/internal/cache"
	"github.com/itcaat/blet/internal/usecase"
)

func RunSpecialOffers(client *api.Client, cfg *config.Config) {
	flights, err := usecase.GetSpecialOffers(client, cfg.DefaultOrigin)

	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
		return
	}

	for _, flight := range flights {
		resp, err := client.GetShortUrl(flight.URL())
		if err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
			return
		}
		partnerUrl := resp.Result.Links[0].PartnerUrl
		fmt.Printf("- %s ‚Üí %s –∑–∞ %d‚ÇΩ (–í—ã–ª–µ—Ç: %s) %s
",
			cache.GetCityName(cfg.DefaultOrigin), cache.GetAnyName(flight.Destination), flight.Price,
			flight.DepartDate, partnerUrl)
	}
}


üìÇ ./cmd/cheapest.go
package cmd

import (
	"fmt"
	"os"
	"strconv"

	"github.com/charmbracelet/huh"
	"github.com/charmbracelet/huh/spinner"
	"github.com/itcaat/blet/config"
	"github.com/itcaat/blet/internal/api"
	"github.com/itcaat/blet/internal/cache"
	"github.com/itcaat/blet/internal/usecase"
)

func RunCheapest(client *api.Client, cfg *config.Config) {
	tickets, err := usecase.GetCheapestTickets(client, cfg.DefaultOrigin, cfg.DefaultDestination, strconv.FormatBool(cfg.OneWay))
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", err)
		return
	}

	if len(tickets) == 0 {
		fmt.Println("‚ö†Ô∏è –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º
	grouped := make(map[string][]string)          // "–ú–æ—Å–∫–≤–∞ ‚Üí –°–æ—á–∏" -> —Å–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π
	details := make(map[string]map[string]string) // [–º–∞—Ä—à—Ä—É—Ç][–æ–ø–∏—Å–∞–Ω–∏–µ] -> —Å—Å—ã–ª–∫–∞

	prepareTickets := func() {
		for _, t := range tickets {
			from := cache.GetCityName(t.Origin)
			to := cache.GetAnyName(t.Destination)
			route := fmt.Sprintf("%s ‚Üí %s", from, to)
			if !cfg.OneWay {
				route += fmt.Sprintf(" ‚Üí %s", from)
			}

			resp, err := client.GetShortUrl(t.URL())
			if err != nil {
				fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
				return
			}
			partnerUrl := resp.Result.Links[0].PartnerUrl

			desc := fmt.Sprintf("–¢—É–¥–∞: %s", t.DepartureAt)

			if cfg.OneWay {
				desc += fmt.Sprintf("‚Äî %d‚ÇΩ ‚Äî %s", t.Price, partnerUrl)
			} else {
				desc += fmt.Sprintf(". –û–±—Ä–∞—Ç–Ω–æ: %s ‚Äî %d‚ÇΩ ‚Äî %s", t.ReturnAt, t.Price, partnerUrl)
			}

			if grouped[route] == nil {
				grouped[route] = []string{}
			}
			grouped[route] = append(grouped[route], desc)

			if details[route] == nil {
				details[route] = make(map[string]string)
			}
			details[route][desc] = t.URL()
		}
	}

	var selectedRoute string
	var selectedDesc string

	_ = spinner.New().Title("–ò—â–µ–º –ª—É—á—à–∏–µ –±–∏–ª–µ—Ç–∏–∫–∏...").Action(prepareTickets).Run()

	form := huh.NewForm(

		huh.NewGroup(
			huh.NewNote().
				Title("
‚úàÔ∏è –°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã").
				Description("–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∞—Ç—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ê–≤–∏–∞—Å–µ–π–ª—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤."),
			huh.NewSelect[string]().
				Title("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç").
				Options(huh.NewOptions(mapsKeys(grouped)...)...).
				Height(5).
				Value(&selectedRoute),
			huh.NewSelect[string]().
				Title("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å").
				Height(8).
				OptionsFunc(func() []huh.Option[string] {
					return huh.NewOptions(grouped[selectedRoute]...)
				}, &selectedRoute).
				Value(&selectedDesc),
		),
	)

	if err := form.Run(); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
		os.Exit(1)
	}
}

// mapsKeys –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∫–∞—Ä—Ç—ã
func mapsKeys(m map[string][]string) []string {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	// –º–æ–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
	return keys
}


üìÇ ./cmd/root.go
package cmd

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/charmbracelet/huh"
	"github.com/itcaat/blet/config"
	"github.com/itcaat/blet/internal/api"
	"github.com/itcaat/blet/internal/cache"
	"github.com/itcaat/blet/internal/form"
	"github.com/joho/godotenv"
)

func Execute() {

	if len(os.Args) > 1 && os.Args[1] == "--reset" {
		home, _ := os.UserHomeDir()
		bletPath := filepath.Join(home, ".blet")

		if err := os.RemoveAll(bletPath); err != nil {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ~/.blet:", err)
			os.Exit(1)
		}

		fmt.Println("üßπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ü–∞–ø–∫–∞ ~/.blet —É–¥–∞–ª–µ–Ω–∞.")
		os.Exit(0)
	}

	if err := cache.Init(); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞:", err)
		os.Exit(1)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
	_ = godotenv.Load()
	token := os.Getenv("AVIASALES_TOKEN")
	if token == "" {
		fmt.Println("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è AVIASALES_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env")
		os.Exit(1)
	}

	cfg, err := config.LoadConfig()
	if err != nil || cfg.DefaultOrigin == "" || cfg.DefaultDestination == "" {
		cfg.DefaultOrigin = "MOW"
		cfg.DefaultDestination = "LED"
		cfg.OneWay = true

		if err := config.SaveConfig(cfg); err != nil {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥:", err)
			os.Exit(1)
		}
	}

	// —Ñ–æ—Ä–º–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞

	var change_default_origin bool

	form_change_default_origin := huh.NewForm(
		huh.NewGroup(
			huh.NewNote().
				Title("
–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é, —Å—Ç—Ä–∞–Ω–Ω–∏–∫. –ö–∞–∂–µ—Ç—Å—è, –ø–æ—Ä–∞ –ø–æ–ª–µ—Ç–∞—Ç—å!? ‚úàÔ∏è"),
			huh.NewConfirm().
				Title(fmt.Sprintf("–û—Ç–∫—É–¥–∞: %s 
–ö—É–¥–∞: %s
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %s 

–û—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ –ø–æ–º–µ–Ω—è–µ–º?", cache.GetCityName(cfg.DefaultOrigin), cache.GetAnyName(cfg.DefaultDestination), cfg.TekstomPokazhiOneWay())).
				Value(&change_default_origin).
				Affirmative("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π").
				Negative("–û—Å—Ç–∞–≤–∏—Ç—å"),
		))

	if err := form_change_default_origin.Run(); err != nil {
		log.Fatal(err)
	}

	if change_default_origin {
		form.ShowIataTargets(&cfg.DefaultOrigin, "–û—Ç–∫—É–¥–∞ –ø–æ–ª–µ—Ç–∏–º", false)
		form.ShowIataTargets(&cfg.DefaultDestination, "–ö—É–¥–∞ –ø–æ–ª–µ—Ç–∏–º (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≥–æ—Ä–æ–¥)", true)
		form.ShowConfirm(&cfg.OneWay, "–í –æ–¥–Ω—É —Å —Å—Ç–æ—Ä–æ–Ω—É?", "–¢–æ–ª—å–∫–æ —Ç—É–¥–∞", "–¢—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ")

		if err := config.SaveConfig(cfg); err != nil {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥:", err)
			os.Exit(1)
		}
	}

	fmt.Sprintln(cfg.OneWay)

	// emoji airplane
	var choice string

	form := huh.NewForm(

		huh.NewGroup(
			huh.NewSelect[string]().
				Title(fmt.Sprintf("%s ‚û°Ô∏è  %s", cache.GetCityName(cfg.DefaultOrigin), cache.GetAnyName(cfg.DefaultDestination))).
				Options(
					huh.NewOption("‚úàÔ∏è –°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã", "cheapest"),
					huh.NewOption("üëª –ü–æ–∏—Å–∫ –ø–æ –Ω–µ–¥–µ–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ", "week"),
					huh.NewOption("üîÆ –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "special"),
				).
				Value(&choice),
		),
	)

	if err := form.Run(); err != nil {
		log.Fatal(err)
	}

	client := api.New(token)

	switch choice {
	case "cheapest":
		RunCheapest(client, &cfg)

	case "week":
		RunWeekMatrix(client, &cfg)

	case "special":
		fmt.Println("‚úàÔ∏è –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π:")
		RunSpecialOffers(client, &cfg)

	default:
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
	}
}


üìÇ ./config/config.go
package config

import (
	"encoding/json"
	"os"
	"path/filepath"
)

type Config struct {
	DefaultOrigin      string `json:"default_origin"`
	DefaultDestination string `json:"default_destination"`
	OneWay             bool   `json:"one_way"`
}

func (c *Config) TekstomPokazhiOneWay() string {
	if c.OneWay {
		return "–í –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É"
	} else {
		return "–¢—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ"
	}
}

func configPath() (string, error) {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return "", err
	}
	configDir := filepath.Join(homeDir, ".blet")
	err = os.MkdirAll(configDir, 0755)
	if err != nil {
		return "", err
	}
	return filepath.Join(configDir, "config.json"), nil
}

func SaveConfig(cfg Config) error {
	path, err := configPath()
	if err != nil {
		return err
	}
	data, err := json.MarshalIndent(cfg, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(path, data, 0644)
}

func LoadConfig() (Config, error) {
	var cfg Config
	path, err := configPath()
	if err != nil {
		return cfg, err
	}
	data, err := os.ReadFile(path)
	if err != nil {
		return cfg, err
	}
	err = json.Unmarshal(data, &cfg)
	return cfg, err
}


üìÇ ./internal/form/iata.go
package form

import (
	"fmt"
	"os"
	"sort"

	"github.com/charmbracelet/huh"
	"github.com/itcaat/blet/internal/cache"
)

func ShowIataTargets(selectedIATA *string, titleSelect string, includeCountry bool) {
	var cityPairs []struct {
		Label string
		Code  string
	}

	for _, city := range cache.Cities().Filter(func(c cache.City) bool {
		return c.HasFlightableAirport
	}) {
		label := fmt.Sprintf("%s (%s)", city.Name, city.Code)
		cityPairs = append(cityPairs, struct {
			Label string
			Code  string
		}{Label: label, Code: city.Code})
	}

	if includeCountry {
		for _, country := range cache.Countries().Data {
			label := fmt.Sprintf("%s (%s)", country.Name, country.Code)
			cityPairs = append(cityPairs, struct {
				Label string
				Code  string
			}{Label: label, Code: country.Code})
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
	sort.Slice(cityPairs, func(i, j int) bool {
		return cityPairs[i].Label < cityPairs[j].Label
	})

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ huh.Options
	var options []huh.Option[string]
	for _, pair := range cityPairs {
		options = append(options, huh.NewOption(pair.Label, pair.Code))
	}

	//–Ω–∞–¥–æ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∏–Ω–∞—á–µ –µ—Å—Ç—å –±–∞–≥
	var selected string

	// UI –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
	form := huh.NewForm(
		huh.NewGroup(
			huh.NewSelect[string]().
				Title(titleSelect).
				Height(10).
				Options(options...).
				Value(&selected),
		),
	)
	if err := form.Run(); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞:", err)
		os.Exit(1)
	}
	*selectedIATA = selected

}


üìÇ ./internal/form/confirm.go
package form

import (
	"fmt"
	"os"

	"github.com/charmbracelet/huh"
)

func ShowConfirm(confirm *bool, title, affirmative, negative string) {

	form := huh.NewForm(
		huh.NewGroup(
			huh.NewConfirm().
				Title(title).
				Affirmative(affirmative).
				Negative(negative).
				Value(confirm),
		),
	)

	if err := form.Run(); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞:", err)
		os.Exit(1)
	}

}


üìÇ ./internal/form/dates.go
package form

import (
	"github.com/charmbracelet/huh"
)

func AskDates(departDate, returnDate *string) error {

	form := huh.NewForm(
		huh.NewGroup(
			huh.NewNote().Title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã").Description("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç –æ—Ç 3 –¥–Ω–µ–π –¥–æ –∏ 4 –¥–Ω–µ–π –ø–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã ‚Äî –∫–∞–∫ –¥–ª—è –≤—ã–ª–µ—Ç–∞, —Ç–∞–∫ –∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è."),
			huh.NewInput().Title("–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)").Value(departDate),
			huh.NewInput().Title("–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î)").Value(returnDate),
		),
	)

	if err := form.Run(); err != nil {
		return err
	}
	return nil
}


üìÇ ./internal/cache/cache.go
package cache

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"sync"
	"time"

	"github.com/go-resty/resty/v2"
)

// --- –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö ---

type City struct {
	Name                 string `json:"name"`
	Code                 string `json:"code"`
	CountryCode          string `json:"country_code"`
	HasFlightableAirport bool   `json:"has_flightable_airport"`
}

type Country struct {
	Name string `json:"name"`
	Code string `json:"code"`
}

// --- –û–±–æ–±—â—ë–Ω–Ω—ã–π –∫–µ—à ---

type genericCache[T any] struct {
	URL      string
	FileName string
	Data     []T
	once     sync.Once
	mu       sync.RWMutex
}

// --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö –∫–µ—à–µ–π ---

type initializableCache interface {
	init() error
}

var allCaches []initializableCache

func newGenericCache[T any](url, fileName string) *genericCache[T] {
	cache := &genericCache[T]{
		URL:      url,
		FileName: fileName,
	}
	allCaches = append(allCaches, cache)
	return cache
}

// --- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–µ—à–∏ ---

var (
	citiesCache    = newGenericCache[City]("https://api.travelpayouts.com/data/ru/cities.json", "cities.json")
	countriesCache = newGenericCache[Country]("https://api.travelpayouts.com/data/ru/countries.json", "countries.json")
)

// --- –ü—É–±–ª–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–µ—à–µ–π ---

func Init() error {
	for _, c := range allCaches {
		if err := c.init(); err != nil {
			return err
		}
	}
	return nil
}

// --- –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ—à–∞ ---

func (c *genericCache[T]) init() error {
	var err error
	c.once.Do(func() {
		var path string
		path, err = ensureCacheFile(c.URL, c.FileName)
		if err != nil {
			return
		}

		var data []byte
		data, err = os.ReadFile(path)
		if err != nil {
			return
		}

		var parsed []T
		if err = json.Unmarshal(data, &parsed); err != nil {
			return
		}

		c.mu.Lock()
		defer c.mu.Unlock()
		c.Data = parsed
	})
	return err
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ---

func ensureCacheFile(url, fileName string) (string, error) {
	home, err := os.UserHomeDir()
	if err != nil {
		return "", err
	}

	cacheDir := filepath.Join(home, ".blet", "cache")
	if err := os.MkdirAll(cacheDir, 0755); err != nil {
		return "", err
	}

	fullPath := filepath.Join(cacheDir, fileName)

	stat, err := os.Stat(fullPath)
	if err == nil && stat.ModTime().AddDate(0, 0, 7).After(time.Now()) {
		return fullPath, nil
	}

	client := resty.New()
	resp, err := client.R().
		SetHeader("Accept", "application/json").
		Get(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ %s: %w", fileName, err)
	}

	if resp.IsError() {
		return "", fmt.Errorf("–Ω–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ %s: %s", fileName, resp.Status())
	}

	if err := os.WriteFile(fullPath, resp.Body(), 0644); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å %s: %w", fileName, err)
	}

	return fullPath, nil
}

// --- –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ ---

func GetAnyName(code string) string {
	if len(code) == 2 {
		return GetCountryName(code)
	} else {
		return GetCityName(code)
	}
}

func GetCityName(code string) string {
	for _, city := range citiesCache.Data {
		if city.Code == code {
			return city.Name
		}
	}
	return code
}

func GetCountryName(code string) string {
	for _, country := range countriesCache.Data {
		if country.Code == code {
			return country.Name
		}
	}
	return code
}

func (c *genericCache[T]) Filter(predicate func(T) bool) []T {
	c.mu.RLock()
	defer c.mu.RUnlock()

	var result []T
	for _, item := range c.Data {
		if predicate(item) {
			result = append(result, item)
		}
	}
	return result
}

func Cities() *genericCache[City] {
	return citiesCache
}

func Countries() *genericCache[Country] {
	return countriesCache
}


üìÇ ./internal/models/week_matrix.go
package models

type WeekMatrixFlight struct {
	Destination     string `json:"destination"`
	DepartDate      string `json:"depart_date"`
	ReturnDate      string `json:"return_date"`
	Value           int    `json:"value"`
	NumberOfChanges int    `json:"number_of_changes"`
	NumberOfStops   int    `json:"number_of_stops"`
}

type WeekMatrixResponse struct {
	Success bool               `json:"success"`
	Data    []WeekMatrixFlight `json:"data"`
}


üìÇ ./internal/models/special_offers.go
package models

import "fmt"

type SpecialOffers struct {
	Destination string `json:"destination"`
	DepartDate  string `json:"departure_at"`
	Price       int    `json:"price"`
	Link        string `json:"link"`
}

func (t *SpecialOffers) URL() string {
	base := "https://www.aviasales.ru"
	return fmt.Sprintf("%s%s", base, t.Link)
}

type SpecialOffersResponse struct {
	Success bool            `json:"success"`
	Data    []SpecialOffers `json:"data"`
}


üìÇ ./internal/models/tools.go
package models

type ShortLink struct {
	Url        string `json:"url"`
	PartnerUrl string `json:"partner_url"`
}

type ShortLinksResult struct {
	Links []ShortLink `json:"links"`
}

type ShortLinksResponse struct {
	Status string           `json:"code"`
	Result ShortLinksResult `json:"result"`
}


üìÇ ./internal/models/cheapest.go
package models

import "fmt"

type Ticket struct {
	Origin      string `json:"origin"`
	Destination string `json:"destination"`
	Price       int    `json:"price"`
	DepartureAt string `json:"departure_at"`
	ReturnAt    string `json:"return_at"`
	Link        string `json:"link"`
}

func (t *Ticket) URL() string {
	base := "https://www.aviasales.ru"
	return fmt.Sprintf("%s%s", base, t.Link)
}

type PriceForDatesResponse struct {
	Success  bool     `json:"success"`
	Data     []Ticket `json:"data"`
	Currency string   `json:"currency"`
}


üìÇ ./internal/api/special_offers.go
package api

import (
	"fmt"

	"github.com/itcaat/blet/internal/models"
)

func (c *Client) GetSpecialOffers(origin string) (models.SpecialOffersResponse, error) {
	const url = "https://api.travelpayouts.com/aviasales/v3/get_special_offers"

	var result models.SpecialOffersResponse

	resp, err := c.resty.R().
		SetQueryParams(map[string]string{
			"origin": origin,
		}).
		SetResult(&result).
		Get(url)

	if err != nil {
		return result, err
	}

	if !result.Success {
		return result, fmt.Errorf("API error. HTTP: %s. Body: %s", resp.Status(), resp.Body())
	}

	return result, nil
}


üìÇ ./internal/api/interface.go
package api

import "github.com/itcaat/blet/internal/models"

type TravelpayoutsAPI interface {
	GetSpecialOffers(origin string) (models.SpecialOffersResponse, error)
	GetCheapest(origin, destination, oneWay string) (models.PriceForDatesResponse, error)
	GetWeekPrices(origin, destination, depart, back string) (models.WeekMatrixResponse, error)
	GetShortUrl(url string) (models.ShortLinksResponse, error)
}


üìÇ ./internal/api/client.go
package api

import (
	"github.com/go-resty/resty/v2"
)

type Client struct {
	resty *resty.Client
}

func New(token string) *Client {
	client := resty.New().
		SetHeader("Accept", "application/json").
		SetHeader("X-Access-Token", token)

	return &Client{
		resty: client,
	}
}

var _ TravelpayoutsAPI = (*Client)(nil)


üìÇ ./internal/api/tools.go
package api

import (
	"fmt"

	"github.com/itcaat/blet/internal/models"
)

func (c *Client) GetShortUrl(url string) (models.ShortLinksResponse, error) {
	const apiUrl = "https://api.travelpayouts.com/links/v1/create"

	// {
	// 	"trs": 400658,
	// 	"marker": 616825,
	// 	"shorten": true,
	// 	"links": [
	// 		{
	// 			"url": "https://www.aviasales.ru/search/LED1201KUF1?t=S717682492001768330500001295LEDDMEKUF_6f72f9df6f61f48624b3183cbc36d313_7992&search_date=26032025&expected_price_uuid=dae5e307-595b-4841-9bfa-88ee28e5ce01&expected_price_source=share&expected_price_currency=rub&expected_price=7966"
	// 		}
	// 	]
	//  }var client = resty.New()

	var result models.ShortLinksResponse

	resp, err := c.resty.R().
		SetBody(map[string]interface{}{
			"trs":     400658,
			"marker":  616825,
			"shorten": true,
			"links": []map[string]interface{}{
				{
					"url": url,
				},
			},
		}).
		SetResult(&result).
		Post(apiUrl)

	if err != nil {
		return result, err
	}

	if result.Status != "success" {
		return result, fmt.Errorf("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç. HTTP: %s. Body: %s. Url: %s", resp.Status(), resp.Body(), resp.Request.URL)
	}

	return result, nil
}


üìÇ ./internal/api/cheapest.go
package api

import (
	"fmt"

	"github.com/itcaat/blet/internal/models"
)

func (c *Client) GetCheapest(origin, destination, one_way string) (models.PriceForDatesResponse, error) {
	const apiUrl = "https://api.travelpayouts.com/aviasales/v3/prices_for_dates"

	var result models.PriceForDatesResponse

	resp, err := c.resty.R().
		SetQueryParams(map[string]string{
			"origin":      origin,
			"destination": destination,
			"one_way":     one_way,
			"limit":       "100",
		}).
		SetResult(&result).
		Get(apiUrl)

	if err != nil {
		return result, err
	}

	if !result.Success {
		return result, fmt.Errorf("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç. HTTP: %s. Body: %s. Request: %s", resp.Status(), resp.Body(), resp.Request.URL)
	}

	return result, nil
}


üìÇ ./internal/api/week.go
package api

import (
	"fmt"

	"github.com/itcaat/blet/internal/models"
)

func (c *Client) GetWeekPrices(origin, destination, depart, back string) (models.WeekMatrixResponse, error) {
	const apiUrl = "https://api.travelpayouts.com/v2/prices/week-matrix"
	var result models.WeekMatrixResponse

	fmt.Printf("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ...: %s ‚Üí %s %s - %s
", origin, destination, depart, back)

	params := map[string]string{
		"origin":      origin,
		"destination": destination,
		"depart_date": depart,
	}

	if back != "" {
		params["return_date"] = back
	}

	resp, err := c.resty.R().
		SetQueryParams(params).
		SetResult(&result).
		Get(apiUrl)

	if err != nil {
		return result, err
	}

	if !result.Success {
		return result, fmt.Errorf("API error: %s. Body: %s. Url: %s", resp.Status(), resp.Body(), resp.Request.URL)
	}

	return result, nil
}


üìÇ ./internal/usecase/special_offers.go
package usecase

import (
	"github.com/itcaat/blet/internal/api"
	"github.com/itcaat/blet/internal/models"
)

func GetSpecialOffers(client api.TravelpayoutsAPI, origin string) ([]models.SpecialOffers, error) {
	resp, err := client.GetSpecialOffers(origin)
	if err != nil {
		return nil, err
	}
	return resp.Data, nil
}


üìÇ ./internal/usecase/cheapest.go
package usecase

import (
	"github.com/itcaat/blet/internal/api"
	"github.com/itcaat/blet/internal/models"
)

func GetCheapestTickets(client api.TravelpayoutsAPI, origin, destination, one_way string) ([]models.Ticket, error) {
	resp, err := client.GetCheapest(origin, destination, one_way)
	if err != nil {
		return nil, err
	}
	return resp.Data, nil
}


üìÇ ./internal/usecase/week.go
package usecase

import (
	"github.com/itcaat/blet/internal/api"
	"github.com/itcaat/blet/internal/models"
)

func GetWeekMatrix(client api.TravelpayoutsAPI, origin, destination, depart, back string) ([]models.WeekMatrixFlight, error) {
	resp, err := client.GetWeekPrices(origin, destination, depart, back)
	if err != nil {
		return nil, err
	}
	return resp.Data, nil
}


üìÇ ./main.go
package main

import "github.com/itcaat/blet/cmd"

func main() {
	cmd.Execute()
}

