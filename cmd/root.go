package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"sort"

	"github.com/charmbracelet/huh"
	"github.com/go-resty/resty/v2"
	"github.com/itcaat/blet/config"
	"github.com/itcaat/blet/internal/cache"
	"github.com/joho/godotenv"
)

type Ticket struct {
	Origin      string `json:"origin"`
	Destination string `json:"destination"`
	Price       int    `json:"price"`
	DepartureAt string `json:"departure_at"`
	Link        string `json:"link"`
}

type PriceForDatesResponse struct {
	Success  bool     `json:"success"`
	Data     []Ticket `json:"data"`
	Currency string   `json:"currency"`
}

func Execute() {
	if len(os.Args) > 1 && os.Args[1] == "--reset" {
		home, _ := os.UserHomeDir()
		bletPath := filepath.Join(home, ".blet")

		if err := os.RemoveAll(bletPath); err != nil {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ~/.blet:", err)
			os.Exit(1)
		}

		fmt.Println("üßπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ü–∞–ø–∫–∞ ~/.blet —É–¥–∞–ª–µ–Ω–∞.")
		os.Exit(0)
	}

	citiesPath, err := cache.EnsureCitiesCache()
	if err != nil {
		fmt.Println("‚ùå cities.json error:", err)
		os.Exit(1)
	}

	cities, err := cache.LoadCities(citiesPath)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ cities.json:", err)
		os.Exit(1)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
	_ = godotenv.Load()
	token := os.Getenv("AVIASALES_TOKEN")
	if token == "" {
		fmt.Println("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è AVIASALES_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env")
		os.Exit(1)
	}

	cfg, err := config.LoadConfig()
	if err != nil || cfg.DefaultOrigin == "" {
		// –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ + –∫–æ–¥)
		var selectedIATA string
		var cityPairs []struct {
			Label string
			Code  string
		}

		for _, city := range cities {
			if city.HasFlightableAirport && city.CountryCode == "RU" {
				label := fmt.Sprintf("%s (%s)", city.Name, city.Code)
				cityPairs = append(cityPairs, struct {
					Label string
					Code  string
				}{Label: label, Code: city.Code})
			}
		}

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
		sort.Slice(cityPairs, func(i, j int) bool {
			return cityPairs[i].Label < cityPairs[j].Label
		})

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ huh.Options
		var options []huh.Option[string]
		for _, pair := range cityPairs {
			options = append(options, huh.NewOption(pair.Label, pair.Code))
		}

		// UI –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
		form := huh.NewForm(
			huh.NewGroup(
				huh.NewSelect[string]().
					Title("–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é").
					Options(options...).
					Value(&selectedIATA),
			),
		)

		if err := form.Run(); err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞:", err)
			os.Exit(1)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
		cfg.DefaultOrigin = selectedIATA
		if err := config.SaveConfig(cfg); err != nil {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥:", err)
			os.Exit(1)
		}

		fmt.Println("‚úÖ –ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", selectedIATA)
	} else {
		fmt.Printf("üåç –ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s\n", cfg.DefaultOrigin)
	}

	var choice string
	menu := huh.NewSelect[string]().
		Title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ").
		Options(
			huh.NewOption("–°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã", "cheapest"),
			huh.NewOption("–î–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é", "week"),
		).
		Value(&choice)

	if err := menu.Run(); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞:", err)
		os.Exit(1)
	}

	switch choice {
	case "cheapest":
		fmt.Println("‚úàÔ∏è –°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã:")
		getCheapest(cfg.DefaultOrigin, token)

	case "week":
		fmt.Println("üìÖ –î–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é:")
		getWeekPrices(cfg.DefaultOrigin, token)

	default:
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
	}
}

func getCheapest(origin, token string) {
	client := resty.New()

	var result PriceForDatesResponse

	resp, err := client.R().
		SetQueryParams(map[string]string{
			"origin":   origin,
			"one_way":  "true",
			"currency": "rub",
			"limit":    "5",
			"token":    token,
		}).
		SetHeader("Accept", "application/json").
		SetResult(&result).
		Get("https://api.travelpayouts.com/aviasales/v3/prices_for_dates")

	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:", err)
		return
	}

	if !result.Success {
		fmt.Printf("‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç API. –°—Ç–∞—Ç—É—Å: %s\n", resp.Status())
		return
	}

	for _, t := range result.Data {
		fmt.Printf("- %s ‚Üí %s –∑–∞ %d‚ÇΩ (%s)\n", t.Origin, t.Destination, t.Price, t.DepartureAt)
		fmt.Printf("  –°—Å—ã–ª–∫–∞: https://www.aviasales.ru%s\n", t.Link)
	}
}

func getWeekPrices(origin, token string) {
	client := resty.New()

	var result struct {
		Success bool `json:"success"`
		Data    []struct {
			Destination   string `json:"destination"`
			DepartDate    string `json:"depart_date"`
			ReturnDate    string `json:"return_date"`
			Value         int    `json:"value"`
			NumberOfStops int    `json:"number_of_changes"`
		} `json:"data"`
	}

	resp, err := client.R().
		SetQueryParams(map[string]string{
			"origin":             origin,
			"destination":        "LED",
			"currency":           "rub",
			"depart_date":        "2025-09-04",
			"return_date":        "2025-09-11",
			"show_to_affiliates": "true",
			"token":              token,
		}).
		SetHeader("Accept", "application/json").
		SetResult(&result).
		Get("https://api.travelpayouts.com/v2/prices/week-matrix")

	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:", err)
		return
	}

	if !result.Success {
		fmt.Printf("‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç API. –°—Ç–∞—Ç—É—Å: %s\n", resp.Status())
		return
	}

	for _, flight := range result.Data {
		fmt.Printf("- %s ‚Üí %s –∑–∞ %d‚ÇΩ (%s ‚Üí %s, –ø–µ—Ä–µ—Å–∞–¥–æ–∫: %d)\n",
			origin, flight.Destination, flight.Value,
			flight.DepartDate, flight.ReturnDate, flight.NumberOfStops)
	}
}
