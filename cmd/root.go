package cmd

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/charmbracelet/huh"
	"github.com/itcaat/blet/config"
	"github.com/itcaat/blet/internal/api"
	"github.com/itcaat/blet/internal/cache"
	"github.com/itcaat/blet/internal/form"
	"github.com/joho/godotenv"
)

func Execute() {

	if len(os.Args) > 1 && os.Args[1] == "--reset" {
		home, _ := os.UserHomeDir()
		bletPath := filepath.Join(home, ".blet")

		if err := os.RemoveAll(bletPath); err != nil {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ~/.blet:", err)
			os.Exit(1)
		}

		fmt.Println("üßπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ü–∞–ø–∫–∞ ~/.blet —É–¥–∞–ª–µ–Ω–∞.")
		os.Exit(0)
	}

	if err := cache.Init(); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞:", err)
		os.Exit(1)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
	_ = godotenv.Load()
	token := os.Getenv("AVIASALES_TOKEN")
	if token == "" {
		fmt.Println("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è AVIASALES_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env")
		os.Exit(1)
	}

	cfg, err := config.LoadConfig()
	if err != nil || cfg.DefaultOrigin == "" || cfg.DefaultDestination == "" {
		cfg.DefaultOrigin = "MOW"
		cfg.DefaultDestination = "LED"
		cfg.OneWay = true

		if err := config.SaveConfig(cfg); err != nil {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥:", err)
			os.Exit(1)
		}
	}

	// —Ñ–æ—Ä–º–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞

	var change_default_origin bool

	form_change_default_origin := huh.NewForm(
		huh.NewGroup(
			huh.NewNote().
				Title("\n–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é, —Å—Ç—Ä–∞–Ω–Ω–∏–∫. –ö–∞–∂–µ—Ç—Å—è, –ø–æ—Ä–∞ –ø–æ–ª–µ—Ç–∞—Ç—å!? ‚úàÔ∏è"),
			huh.NewConfirm().
				Title(fmt.Sprintf("–û—Ç–∫—É–¥–∞: %s \n–ö—É–¥–∞: %s\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %s \n\n–û—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ –ø–æ–º–µ–Ω—è–µ–º?", cache.GetCityName(cfg.DefaultOrigin), cache.GetAnyName(cfg.DefaultDestination), cfg.TekstomPokazhiOneWay())).
				Value(&change_default_origin).
				Affirmative("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π").
				Negative("–û—Å—Ç–∞–≤–∏—Ç—å"),
		))

	if err := form_change_default_origin.Run(); err != nil {
		log.Fatal(err)
	}

	if change_default_origin {
		form.ShowIataTargets(&cfg.DefaultOrigin, "–û—Ç–∫—É–¥–∞ –ø–æ–ª–µ—Ç–∏–º", false)
		form.ShowIataTargets(&cfg.DefaultDestination, "–ö—É–¥–∞ –ø–æ–ª–µ—Ç–∏–º (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≥–æ—Ä–æ–¥)", true)
		form.ShowConfirm(&cfg.OneWay, "–í –æ–¥–Ω—É —Å —Å—Ç–æ—Ä–æ–Ω—É?", "–¢–æ–ª—å–∫–æ —Ç—É–¥–∞", "–¢—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ")

		if err := config.SaveConfig(cfg); err != nil {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥:", err)
			os.Exit(1)
		}
	}

	fmt.Sprintln(cfg.OneWay)

	// emoji airplane
	var choice string

	form := huh.NewForm(

		huh.NewGroup(
			huh.NewSelect[string]().
				Title(fmt.Sprintf("%s ‚û°Ô∏è  %s", cache.GetCityName(cfg.DefaultOrigin), cache.GetAnyName(cfg.DefaultDestination))).
				Options(
					huh.NewOption("‚úàÔ∏è –°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã", "cheapest"),
					huh.NewOption("üëª –ü–æ–∏—Å–∫ –ø–æ –Ω–µ–¥–µ–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ", "week"),
					huh.NewOption("üîÆ –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "special"),
				).
				Value(&choice),
		),
	)

	if err := form.Run(); err != nil {
		log.Fatal(err)
	}

	client := api.New(token)

	switch choice {
	case "cheapest":
		RunCheapest(client, &cfg)

	case "week":
		RunWeekMatrix(client, &cfg)

	case "special":
		fmt.Println("‚úàÔ∏è –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π:")
		RunSpecialOffers(client, &cfg)

	default:
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
	}
}
